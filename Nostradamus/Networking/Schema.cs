// automatically generated by the FlatBuffers compiler, do not modify

namespace Nostradamus.Schema
{

using System;
using FlatBuffers;

public struct MessageEnvelope : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MessageEnvelope GetRootAsMessageEnvelope(ByteBuffer _bb) { return GetRootAsMessageEnvelope(_bb, new MessageEnvelope()); }
  public static MessageEnvelope GetRootAsMessageEnvelope(ByteBuffer _bb, MessageEnvelope obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MessageEnvelope __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
  public byte Data(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<MessageEnvelope> CreateMessageEnvelope(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(2);
    MessageEnvelope.AddData(builder, dataOffset);
    MessageEnvelope.AddId(builder, idOffset);
    return MessageEnvelope.EndMessageEnvelope(builder);
  }

  public static void StartMessageEnvelope(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<MessageEnvelope> EndMessageEnvelope(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MessageEnvelope>(o);
  }
};

public struct ActorId : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ActorId GetRootAsActorId(ByteBuffer _bb) { return GetRootAsActorId(_bb, new ActorId()); }
  public static ActorId GetRootAsActorId(ByteBuffer _bb, ActorId obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ActorId __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Description { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<ActorId> CreateActorId(FlatBufferBuilder builder,
      int value = 0,
      StringOffset descriptionOffset = default(StringOffset)) {
    builder.StartObject(2);
    ActorId.AddDescription(builder, descriptionOffset);
    ActorId.AddValue(builder, value);
    return ActorId.EndActorId(builder);
  }

  public static void StartActorId(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(0, value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(1, descriptionOffset.Value, 0); }
  public static Offset<ActorId> EndActorId(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ActorId>(o);
  }
};

public struct ClientId : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ClientId GetRootAsClientId(ByteBuffer _bb) { return GetRootAsClientId(_bb, new ClientId()); }
  public static ClientId GetRootAsClientId(ByteBuffer _bb, ClientId obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ClientId __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Description { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<ClientId> CreateClientId(FlatBufferBuilder builder,
      int value = 0,
      StringOffset descriptionOffset = default(StringOffset)) {
    builder.StartObject(2);
    ClientId.AddDescription(builder, descriptionOffset);
    ClientId.AddValue(builder, value);
    return ClientId.EndClientId(builder);
  }

  public static void StartClientId(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(0, value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(1, descriptionOffset.Value, 0); }
  public static Offset<ClientId> EndClientId(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ClientId>(o);
  }
};

public struct Command : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Command GetRootAsCommand(ByteBuffer _bb) { return GetRootAsCommand(_bb, new Command()); }
  public static Command GetRootAsCommand(ByteBuffer _bb, Command obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Command __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ClientId? ClientId { get { int o = __p.__offset(4); return o != 0 ? (ClientId?)(new ClientId()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ActorId? ActorId { get { int o = __p.__offset(6); return o != 0 ? (ActorId?)(new ActorId()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int Sequence { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Time { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DeltaTime { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public MessageEnvelope? Args { get { int o = __p.__offset(14); return o != 0 ? (MessageEnvelope?)(new MessageEnvelope()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Command> CreateCommand(FlatBufferBuilder builder,
      Offset<ClientId> clientIdOffset = default(Offset<ClientId>),
      Offset<ActorId> actorIdOffset = default(Offset<ActorId>),
      int sequence = 0,
      int time = 0,
      int deltaTime = 0,
      Offset<MessageEnvelope> argsOffset = default(Offset<MessageEnvelope>)) {
    builder.StartObject(6);
    Command.AddArgs(builder, argsOffset);
    Command.AddDeltaTime(builder, deltaTime);
    Command.AddTime(builder, time);
    Command.AddSequence(builder, sequence);
    Command.AddActorId(builder, actorIdOffset);
    Command.AddClientId(builder, clientIdOffset);
    return Command.EndCommand(builder);
  }

  public static void StartCommand(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddClientId(FlatBufferBuilder builder, Offset<ClientId> clientIdOffset) { builder.AddOffset(0, clientIdOffset.Value, 0); }
  public static void AddActorId(FlatBufferBuilder builder, Offset<ActorId> actorIdOffset) { builder.AddOffset(1, actorIdOffset.Value, 0); }
  public static void AddSequence(FlatBufferBuilder builder, int sequence) { builder.AddInt(2, sequence, 0); }
  public static void AddTime(FlatBufferBuilder builder, int time) { builder.AddInt(3, time, 0); }
  public static void AddDeltaTime(FlatBufferBuilder builder, int deltaTime) { builder.AddInt(4, deltaTime, 0); }
  public static void AddArgs(FlatBufferBuilder builder, Offset<MessageEnvelope> argsOffset) { builder.AddOffset(5, argsOffset.Value, 0); }
  public static Offset<Command> EndCommand(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // clientId
    builder.Required(o, 6);  // actorId
    builder.Required(o, 14);  // args
    return new Offset<Command>(o);
  }
};

public struct Event : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Event GetRootAsEvent(ByteBuffer _bb) { return GetRootAsEvent(_bb, new Event()); }
  public static Event GetRootAsEvent(ByteBuffer _bb, Event obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Event __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActorId? ActorId { get { int o = __p.__offset(4); return o != 0 ? (ActorId?)(new ActorId()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public MessageEnvelope? Args { get { int o = __p.__offset(6); return o != 0 ? (MessageEnvelope?)(new MessageEnvelope()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Event> CreateEvent(FlatBufferBuilder builder,
      Offset<ActorId> actorIdOffset = default(Offset<ActorId>),
      Offset<MessageEnvelope> argsOffset = default(Offset<MessageEnvelope>)) {
    builder.StartObject(2);
    Event.AddArgs(builder, argsOffset);
    Event.AddActorId(builder, actorIdOffset);
    return Event.EndEvent(builder);
  }

  public static void StartEvent(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddActorId(FlatBufferBuilder builder, Offset<ActorId> actorIdOffset) { builder.AddOffset(0, actorIdOffset.Value, 0); }
  public static void AddArgs(FlatBufferBuilder builder, Offset<MessageEnvelope> argsOffset) { builder.AddOffset(1, argsOffset.Value, 0); }
  public static Offset<Event> EndEvent(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // actorId
    builder.Required(o, 6);  // args
    return new Offset<Event>(o);
  }
};

public struct ActorSnapshot : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ActorSnapshot GetRootAsActorSnapshot(ByteBuffer _bb) { return GetRootAsActorSnapshot(_bb, new ActorSnapshot()); }
  public static ActorSnapshot GetRootAsActorSnapshot(ByteBuffer _bb, ActorSnapshot obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ActorSnapshot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MessageEnvelope? Desc { get { int o = __p.__offset(4); return o != 0 ? (MessageEnvelope?)(new MessageEnvelope()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public MessageEnvelope? Args { get { int o = __p.__offset(6); return o != 0 ? (MessageEnvelope?)(new MessageEnvelope()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<ActorSnapshot> CreateActorSnapshot(FlatBufferBuilder builder,
      Offset<MessageEnvelope> descOffset = default(Offset<MessageEnvelope>),
      Offset<MessageEnvelope> argsOffset = default(Offset<MessageEnvelope>)) {
    builder.StartObject(2);
    ActorSnapshot.AddArgs(builder, argsOffset);
    ActorSnapshot.AddDesc(builder, descOffset);
    return ActorSnapshot.EndActorSnapshot(builder);
  }

  public static void StartActorSnapshot(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddDesc(FlatBufferBuilder builder, Offset<MessageEnvelope> descOffset) { builder.AddOffset(0, descOffset.Value, 0); }
  public static void AddArgs(FlatBufferBuilder builder, Offset<MessageEnvelope> argsOffset) { builder.AddOffset(1, argsOffset.Value, 0); }
  public static Offset<ActorSnapshot> EndActorSnapshot(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // desc
    builder.Required(o, 6);  // args
    return new Offset<ActorSnapshot>(o);
  }
};

public struct SimulatorSnapshot : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SimulatorSnapshot GetRootAsSimulatorSnapshot(ByteBuffer _bb) { return GetRootAsSimulatorSnapshot(_bb, new SimulatorSnapshot()); }
  public static SimulatorSnapshot GetRootAsSimulatorSnapshot(ByteBuffer _bb, SimulatorSnapshot obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SimulatorSnapshot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActorSnapshot? Actors(int j) { int o = __p.__offset(4); return o != 0 ? (ActorSnapshot?)(new ActorSnapshot()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActorsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SimulatorSnapshot> CreateSimulatorSnapshot(FlatBufferBuilder builder,
      VectorOffset actorsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    SimulatorSnapshot.AddActors(builder, actorsOffset);
    return SimulatorSnapshot.EndSimulatorSnapshot(builder);
  }

  public static void StartSimulatorSnapshot(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddActors(FlatBufferBuilder builder, VectorOffset actorsOffset) { builder.AddOffset(0, actorsOffset.Value, 0); }
  public static VectorOffset CreateActorsVector(FlatBufferBuilder builder, Offset<ActorSnapshot>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartActorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SimulatorSnapshot> EndSimulatorSnapshot(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SimulatorSnapshot>(o);
  }
};

public struct CommandFrame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CommandFrame GetRootAsCommandFrame(ByteBuffer _bb) { return GetRootAsCommandFrame(_bb, new CommandFrame()); }
  public static CommandFrame GetRootAsCommandFrame(ByteBuffer _bb, CommandFrame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CommandFrame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ClientId? ClientId { get { int o = __p.__offset(4); return o != 0 ? (ClientId?)(new ClientId()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Command? Commands(int j) { int o = __p.__offset(6); return o != 0 ? (Command?)(new Command()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CommandsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<CommandFrame> CreateCommandFrame(FlatBufferBuilder builder,
      Offset<ClientId> clientIdOffset = default(Offset<ClientId>),
      VectorOffset commandsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    CommandFrame.AddCommands(builder, commandsOffset);
    CommandFrame.AddClientId(builder, clientIdOffset);
    return CommandFrame.EndCommandFrame(builder);
  }

  public static void StartCommandFrame(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddClientId(FlatBufferBuilder builder, Offset<ClientId> clientIdOffset) { builder.AddOffset(0, clientIdOffset.Value, 0); }
  public static void AddCommands(FlatBufferBuilder builder, VectorOffset commandsOffset) { builder.AddOffset(1, commandsOffset.Value, 0); }
  public static VectorOffset CreateCommandsVector(FlatBufferBuilder builder, Offset<Command>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartCommandsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CommandFrame> EndCommandFrame(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // clientId
    return new Offset<CommandFrame>(o);
  }
};

public struct FullSyncFrame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FullSyncFrame GetRootAsFullSyncFrame(ByteBuffer _bb) { return GetRootAsFullSyncFrame(_bb, new FullSyncFrame()); }
  public static FullSyncFrame GetRootAsFullSyncFrame(ByteBuffer _bb, FullSyncFrame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FullSyncFrame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Time { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DeltaTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public SimulatorSnapshot? Snapshot { get { int o = __p.__offset(8); return o != 0 ? (SimulatorSnapshot?)(new SimulatorSnapshot()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<FullSyncFrame> CreateFullSyncFrame(FlatBufferBuilder builder,
      int time = 0,
      int deltaTime = 0,
      Offset<SimulatorSnapshot> snapshotOffset = default(Offset<SimulatorSnapshot>)) {
    builder.StartObject(3);
    FullSyncFrame.AddSnapshot(builder, snapshotOffset);
    FullSyncFrame.AddDeltaTime(builder, deltaTime);
    FullSyncFrame.AddTime(builder, time);
    return FullSyncFrame.EndFullSyncFrame(builder);
  }

  public static void StartFullSyncFrame(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddTime(FlatBufferBuilder builder, int time) { builder.AddInt(0, time, 0); }
  public static void AddDeltaTime(FlatBufferBuilder builder, int deltaTime) { builder.AddInt(1, deltaTime, 0); }
  public static void AddSnapshot(FlatBufferBuilder builder, Offset<SimulatorSnapshot> snapshotOffset) { builder.AddOffset(2, snapshotOffset.Value, 0); }
  public static Offset<FullSyncFrame> EndFullSyncFrame(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FullSyncFrame>(o);
  }
};

public struct CommandSeq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CommandSeq GetRootAsCommandSeq(ByteBuffer _bb) { return GetRootAsCommandSeq(_bb, new CommandSeq()); }
  public static CommandSeq GetRootAsCommandSeq(ByteBuffer _bb, CommandSeq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CommandSeq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ClientId? ClientId { get { int o = __p.__offset(4); return o != 0 ? (ClientId?)(new ClientId()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int Sequence { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<CommandSeq> CreateCommandSeq(FlatBufferBuilder builder,
      Offset<ClientId> clientIdOffset = default(Offset<ClientId>),
      int sequence = 0) {
    builder.StartObject(2);
    CommandSeq.AddSequence(builder, sequence);
    CommandSeq.AddClientId(builder, clientIdOffset);
    return CommandSeq.EndCommandSeq(builder);
  }

  public static void StartCommandSeq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddClientId(FlatBufferBuilder builder, Offset<ClientId> clientIdOffset) { builder.AddOffset(0, clientIdOffset.Value, 0); }
  public static void AddSequence(FlatBufferBuilder builder, int sequence) { builder.AddInt(1, sequence, 0); }
  public static Offset<CommandSeq> EndCommandSeq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // clientId
    return new Offset<CommandSeq>(o);
  }
};

public struct DeltaSyncFrame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DeltaSyncFrame GetRootAsDeltaSyncFrame(ByteBuffer _bb) { return GetRootAsDeltaSyncFrame(_bb, new DeltaSyncFrame()); }
  public static DeltaSyncFrame GetRootAsDeltaSyncFrame(ByteBuffer _bb, DeltaSyncFrame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DeltaSyncFrame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Time { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DeltaTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Event? Events(int j) { int o = __p.__offset(8); return o != 0 ? (Event?)(new Event()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EventsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CommandSeq? LastCommandSeqs(int j) { int o = __p.__offset(10); return o != 0 ? (CommandSeq?)(new CommandSeq()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LastCommandSeqsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<DeltaSyncFrame> CreateDeltaSyncFrame(FlatBufferBuilder builder,
      int time = 0,
      int deltaTime = 0,
      VectorOffset eventsOffset = default(VectorOffset),
      VectorOffset lastCommandSeqsOffset = default(VectorOffset)) {
    builder.StartObject(4);
    DeltaSyncFrame.AddLastCommandSeqs(builder, lastCommandSeqsOffset);
    DeltaSyncFrame.AddEvents(builder, eventsOffset);
    DeltaSyncFrame.AddDeltaTime(builder, deltaTime);
    DeltaSyncFrame.AddTime(builder, time);
    return DeltaSyncFrame.EndDeltaSyncFrame(builder);
  }

  public static void StartDeltaSyncFrame(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddTime(FlatBufferBuilder builder, int time) { builder.AddInt(0, time, 0); }
  public static void AddDeltaTime(FlatBufferBuilder builder, int deltaTime) { builder.AddInt(1, deltaTime, 0); }
  public static void AddEvents(FlatBufferBuilder builder, VectorOffset eventsOffset) { builder.AddOffset(2, eventsOffset.Value, 0); }
  public static VectorOffset CreateEventsVector(FlatBufferBuilder builder, Offset<Event>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartEventsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLastCommandSeqs(FlatBufferBuilder builder, VectorOffset lastCommandSeqsOffset) { builder.AddOffset(3, lastCommandSeqsOffset.Value, 0); }
  public static VectorOffset CreateLastCommandSeqsVector(FlatBufferBuilder builder, Offset<CommandSeq>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartLastCommandSeqsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DeltaSyncFrame> EndDeltaSyncFrame(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DeltaSyncFrame>(o);
  }
};

public struct Login : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Login GetRootAsLogin(ByteBuffer _bb) { return GetRootAsLogin(_bb, new Login()); }
  public static Login GetRootAsLogin(ByteBuffer _bb, Login obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Login __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ClientId? ClientId { get { int o = __p.__offset(4); return o != 0 ? (ClientId?)(new ClientId()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Login> CreateLogin(FlatBufferBuilder builder,
      Offset<ClientId> clientIdOffset = default(Offset<ClientId>)) {
    builder.StartObject(1);
    Login.AddClientId(builder, clientIdOffset);
    return Login.EndLogin(builder);
  }

  public static void StartLogin(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddClientId(FlatBufferBuilder builder, Offset<ClientId> clientIdOffset) { builder.AddOffset(0, clientIdOffset.Value, 0); }
  public static Offset<Login> EndLogin(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // clientId
    return new Offset<Login>(o);
  }
};

public struct Vector3 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Vector3 GetRootAsVector3(ByteBuffer _bb) { return GetRootAsVector3(_bb, new Vector3()); }
  public static Vector3 GetRootAsVector3(ByteBuffer _bb, Vector3 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Z { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Vector3> CreateVector3(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f,
      float z = 0.0f) {
    builder.StartObject(3);
    Vector3.AddZ(builder, z);
    Vector3.AddY(builder, y);
    Vector3.AddX(builder, x);
    return Vector3.EndVector3(builder);
  }

  public static void StartVector3(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(2, z, 0.0f); }
  public static Offset<Vector3> EndVector3(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Vector3>(o);
  }
};

public struct Quaternion : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Quaternion GetRootAsQuaternion(ByteBuffer _bb) { return GetRootAsQuaternion(_bb, new Quaternion()); }
  public static Quaternion GetRootAsQuaternion(ByteBuffer _bb, Quaternion obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Quaternion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Z { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float W { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Quaternion> CreateQuaternion(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f,
      float z = 0.0f,
      float w = 0.0f) {
    builder.StartObject(4);
    Quaternion.AddW(builder, w);
    Quaternion.AddZ(builder, z);
    Quaternion.AddY(builder, y);
    Quaternion.AddX(builder, x);
    return Quaternion.EndQuaternion(builder);
  }

  public static void StartQuaternion(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(2, z, 0.0f); }
  public static void AddW(FlatBufferBuilder builder, float w) { builder.AddFloat(3, w, 0.0f); }
  public static Offset<Quaternion> EndQuaternion(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Quaternion>(o);
  }
};

public struct RigidBodyMovedEvent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RigidBodyMovedEvent GetRootAsRigidBodyMovedEvent(ByteBuffer _bb) { return GetRootAsRigidBodyMovedEvent(_bb, new RigidBodyMovedEvent()); }
  public static RigidBodyMovedEvent GetRootAsRigidBodyMovedEvent(ByteBuffer _bb, RigidBodyMovedEvent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RigidBodyMovedEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vector3? Position { get { int o = __p.__offset(4); return o != 0 ? (Vector3?)(new Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Quaternion? Rotation { get { int o = __p.__offset(6); return o != 0 ? (Quaternion?)(new Quaternion()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Vector3? LinearVelocity { get { int o = __p.__offset(8); return o != 0 ? (Vector3?)(new Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Vector3? AngularVelocity { get { int o = __p.__offset(10); return o != 0 ? (Vector3?)(new Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<RigidBodyMovedEvent> CreateRigidBodyMovedEvent(FlatBufferBuilder builder,
      Offset<Vector3> positionOffset = default(Offset<Vector3>),
      Offset<Quaternion> rotationOffset = default(Offset<Quaternion>),
      Offset<Vector3> linearVelocityOffset = default(Offset<Vector3>),
      Offset<Vector3> angularVelocityOffset = default(Offset<Vector3>)) {
    builder.StartObject(4);
    RigidBodyMovedEvent.AddAngularVelocity(builder, angularVelocityOffset);
    RigidBodyMovedEvent.AddLinearVelocity(builder, linearVelocityOffset);
    RigidBodyMovedEvent.AddRotation(builder, rotationOffset);
    RigidBodyMovedEvent.AddPosition(builder, positionOffset);
    return RigidBodyMovedEvent.EndRigidBodyMovedEvent(builder);
  }

  public static void StartRigidBodyMovedEvent(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Vector3> positionOffset) { builder.AddOffset(0, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<Quaternion> rotationOffset) { builder.AddOffset(1, rotationOffset.Value, 0); }
  public static void AddLinearVelocity(FlatBufferBuilder builder, Offset<Vector3> linearVelocityOffset) { builder.AddOffset(2, linearVelocityOffset.Value, 0); }
  public static void AddAngularVelocity(FlatBufferBuilder builder, Offset<Vector3> angularVelocityOffset) { builder.AddOffset(3, angularVelocityOffset.Value, 0); }
  public static Offset<RigidBodyMovedEvent> EndRigidBodyMovedEvent(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RigidBodyMovedEvent>(o);
  }
};

public struct RigidBodySnapshot : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RigidBodySnapshot GetRootAsRigidBodySnapshot(ByteBuffer _bb) { return GetRootAsRigidBodySnapshot(_bb, new RigidBodySnapshot()); }
  public static RigidBodySnapshot GetRootAsRigidBodySnapshot(ByteBuffer _bb, RigidBodySnapshot obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RigidBodySnapshot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vector3? Position { get { int o = __p.__offset(4); return o != 0 ? (Vector3?)(new Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Quaternion? Rotation { get { int o = __p.__offset(6); return o != 0 ? (Quaternion?)(new Quaternion()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Vector3? LinearVelocity { get { int o = __p.__offset(8); return o != 0 ? (Vector3?)(new Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Vector3? AngularVelocity { get { int o = __p.__offset(10); return o != 0 ? (Vector3?)(new Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<RigidBodySnapshot> CreateRigidBodySnapshot(FlatBufferBuilder builder,
      Offset<Vector3> positionOffset = default(Offset<Vector3>),
      Offset<Quaternion> rotationOffset = default(Offset<Quaternion>),
      Offset<Vector3> linearVelocityOffset = default(Offset<Vector3>),
      Offset<Vector3> angularVelocityOffset = default(Offset<Vector3>)) {
    builder.StartObject(4);
    RigidBodySnapshot.AddAngularVelocity(builder, angularVelocityOffset);
    RigidBodySnapshot.AddLinearVelocity(builder, linearVelocityOffset);
    RigidBodySnapshot.AddRotation(builder, rotationOffset);
    RigidBodySnapshot.AddPosition(builder, positionOffset);
    return RigidBodySnapshot.EndRigidBodySnapshot(builder);
  }

  public static void StartRigidBodySnapshot(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Vector3> positionOffset) { builder.AddOffset(0, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<Quaternion> rotationOffset) { builder.AddOffset(1, rotationOffset.Value, 0); }
  public static void AddLinearVelocity(FlatBufferBuilder builder, Offset<Vector3> linearVelocityOffset) { builder.AddOffset(2, linearVelocityOffset.Value, 0); }
  public static void AddAngularVelocity(FlatBufferBuilder builder, Offset<Vector3> angularVelocityOffset) { builder.AddOffset(3, angularVelocityOffset.Value, 0); }
  public static Offset<RigidBodySnapshot> EndRigidBodySnapshot(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RigidBodySnapshot>(o);
  }
};

public struct BallDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BallDesc GetRootAsBallDesc(ByteBuffer _bb) { return GetRootAsBallDesc(_bb, new BallDesc()); }
  public static BallDesc GetRootAsBallDesc(ByteBuffer _bb, BallDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BallDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActorId? Id { get { int o = __p.__offset(4); return o != 0 ? (ActorId?)(new ActorId()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Vector3? InitialPosition { get { int o = __p.__offset(6); return o != 0 ? (Vector3?)(new Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<BallDesc> CreateBallDesc(FlatBufferBuilder builder,
      Offset<ActorId> idOffset = default(Offset<ActorId>),
      Offset<Vector3> initialPositionOffset = default(Offset<Vector3>)) {
    builder.StartObject(2);
    BallDesc.AddInitialPosition(builder, initialPositionOffset);
    BallDesc.AddId(builder, idOffset);
    return BallDesc.EndBallDesc(builder);
  }

  public static void StartBallDesc(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddId(FlatBufferBuilder builder, Offset<ActorId> idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddInitialPosition(FlatBufferBuilder builder, Offset<Vector3> initialPositionOffset) { builder.AddOffset(1, initialPositionOffset.Value, 0); }
  public static Offset<BallDesc> EndBallDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // id
    builder.Required(o, 6);  // initialPosition
    return new Offset<BallDesc>(o);
  }
};

public struct CubeDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CubeDesc GetRootAsCubeDesc(ByteBuffer _bb) { return GetRootAsCubeDesc(_bb, new CubeDesc()); }
  public static CubeDesc GetRootAsCubeDesc(ByteBuffer _bb, CubeDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CubeDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActorId? Id { get { int o = __p.__offset(4); return o != 0 ? (ActorId?)(new ActorId()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Vector3? InitialPosition { get { int o = __p.__offset(6); return o != 0 ? (Vector3?)(new Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<CubeDesc> CreateCubeDesc(FlatBufferBuilder builder,
      Offset<ActorId> idOffset = default(Offset<ActorId>),
      Offset<Vector3> initialPositionOffset = default(Offset<Vector3>)) {
    builder.StartObject(2);
    CubeDesc.AddInitialPosition(builder, initialPositionOffset);
    CubeDesc.AddId(builder, idOffset);
    return CubeDesc.EndCubeDesc(builder);
  }

  public static void StartCubeDesc(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddId(FlatBufferBuilder builder, Offset<ActorId> idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddInitialPosition(FlatBufferBuilder builder, Offset<Vector3> initialPositionOffset) { builder.AddOffset(1, initialPositionOffset.Value, 0); }
  public static Offset<CubeDesc> EndCubeDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // id
    builder.Required(o, 6);  // initialPosition
    return new Offset<CubeDesc>(o);
  }
};

public struct KickBallCommand : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static KickBallCommand GetRootAsKickBallCommand(ByteBuffer _bb) { return GetRootAsKickBallCommand(_bb, new KickBallCommand()); }
  public static KickBallCommand GetRootAsKickBallCommand(ByteBuffer _bb, KickBallCommand obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public KickBallCommand __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float InputX { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float InputY { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float InputZ { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<KickBallCommand> CreateKickBallCommand(FlatBufferBuilder builder,
      float inputX = 0.0f,
      float inputY = 0.0f,
      float inputZ = 0.0f) {
    builder.StartObject(3);
    KickBallCommand.AddInputZ(builder, inputZ);
    KickBallCommand.AddInputY(builder, inputY);
    KickBallCommand.AddInputX(builder, inputX);
    return KickBallCommand.EndKickBallCommand(builder);
  }

  public static void StartKickBallCommand(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddInputX(FlatBufferBuilder builder, float inputX) { builder.AddFloat(0, inputX, 0.0f); }
  public static void AddInputY(FlatBufferBuilder builder, float inputY) { builder.AddFloat(1, inputY, 0.0f); }
  public static void AddInputZ(FlatBufferBuilder builder, float inputZ) { builder.AddFloat(2, inputZ, 0.0f); }
  public static Offset<KickBallCommand> EndKickBallCommand(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<KickBallCommand>(o);
  }
};

public struct SceneInitializedEvent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SceneInitializedEvent GetRootAsSceneInitializedEvent(ByteBuffer _bb) { return GetRootAsSceneInitializedEvent(_bb, new SceneInitializedEvent()); }
  public static SceneInitializedEvent GetRootAsSceneInitializedEvent(ByteBuffer _bb, SceneInitializedEvent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SceneInitializedEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte CubeRows { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte CubeColumns { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<SceneInitializedEvent> CreateSceneInitializedEvent(FlatBufferBuilder builder,
      byte cubeRows = 0,
      byte cubeColumns = 0) {
    builder.StartObject(2);
    SceneInitializedEvent.AddCubeColumns(builder, cubeColumns);
    SceneInitializedEvent.AddCubeRows(builder, cubeRows);
    return SceneInitializedEvent.EndSceneInitializedEvent(builder);
  }

  public static void StartSceneInitializedEvent(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddCubeRows(FlatBufferBuilder builder, byte cubeRows) { builder.AddByte(0, cubeRows, 0); }
  public static void AddCubeColumns(FlatBufferBuilder builder, byte cubeColumns) { builder.AddByte(1, cubeColumns, 0); }
  public static Offset<SceneInitializedEvent> EndSceneInitializedEvent(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SceneInitializedEvent>(o);
  }
};


}
