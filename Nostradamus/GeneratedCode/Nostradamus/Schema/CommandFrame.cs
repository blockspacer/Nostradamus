// automatically generated by the FlatBuffers compiler, do not modify

namespace Nostradamus.Schema
{

using System;
using FlatBuffers;

public struct CommandFrame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CommandFrame GetRootAsCommandFrame(ByteBuffer _bb) { return GetRootAsCommandFrame(_bb, new CommandFrame()); }
  public static CommandFrame GetRootAsCommandFrame(ByteBuffer _bb, CommandFrame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CommandFrame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ClientId? ClientId { get { int o = __p.__offset(4); return o != 0 ? (ClientId?)(new ClientId()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Command? Commands(int j) { int o = __p.__offset(6); return o != 0 ? (Command?)(new Command()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CommandsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<CommandFrame> CreateCommandFrame(FlatBufferBuilder builder,
      Offset<ClientId> clientIdOffset = default(Offset<ClientId>),
      VectorOffset commandsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    CommandFrame.AddCommands(builder, commandsOffset);
    CommandFrame.AddClientId(builder, clientIdOffset);
    return CommandFrame.EndCommandFrame(builder);
  }

  public static void StartCommandFrame(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddClientId(FlatBufferBuilder builder, Offset<ClientId> clientIdOffset) { builder.AddOffset(0, clientIdOffset.Value, 0); }
  public static void AddCommands(FlatBufferBuilder builder, VectorOffset commandsOffset) { builder.AddOffset(1, commandsOffset.Value, 0); }
  public static VectorOffset CreateCommandsVector(FlatBufferBuilder builder, Offset<Command>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartCommandsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CommandFrame> EndCommandFrame(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // clientId
    return new Offset<CommandFrame>(o);
  }
};


}
