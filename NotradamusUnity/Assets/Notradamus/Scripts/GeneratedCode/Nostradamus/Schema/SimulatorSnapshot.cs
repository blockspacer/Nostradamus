// automatically generated by the FlatBuffers compiler, do not modify

namespace Nostradamus.Schema
{

using System;
using FlatBuffers;

public struct SimulatorSnapshot : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SimulatorSnapshot GetRootAsSimulatorSnapshot(ByteBuffer _bb) { return GetRootAsSimulatorSnapshot(_bb, new SimulatorSnapshot()); }
  public static SimulatorSnapshot GetRootAsSimulatorSnapshot(ByteBuffer _bb, SimulatorSnapshot obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SimulatorSnapshot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActorSnapshot? Actors(int j) { int o = __p.__offset(4); return o != 0 ? (ActorSnapshot?)(new ActorSnapshot()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActorsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SimulatorSnapshot> CreateSimulatorSnapshot(FlatBufferBuilder builder,
      VectorOffset actorsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    SimulatorSnapshot.AddActors(builder, actorsOffset);
    return SimulatorSnapshot.EndSimulatorSnapshot(builder);
  }

  public static void StartSimulatorSnapshot(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddActors(FlatBufferBuilder builder, VectorOffset actorsOffset) { builder.AddOffset(0, actorsOffset.Value, 0); }
  public static VectorOffset CreateActorsVector(FlatBufferBuilder builder, Offset<ActorSnapshot>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartActorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SimulatorSnapshot> EndSimulatorSnapshot(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SimulatorSnapshot>(o);
  }
};


}
