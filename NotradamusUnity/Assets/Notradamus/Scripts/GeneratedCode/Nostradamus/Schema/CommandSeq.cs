// automatically generated by the FlatBuffers compiler, do not modify

namespace Nostradamus.Schema
{

using System;
using FlatBuffers;

public struct CommandSeq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CommandSeq GetRootAsCommandSeq(ByteBuffer _bb) { return GetRootAsCommandSeq(_bb, new CommandSeq()); }
  public static CommandSeq GetRootAsCommandSeq(ByteBuffer _bb, CommandSeq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CommandSeq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ClientId? ClientId { get { int o = __p.__offset(4); return o != 0 ? (ClientId?)(new ClientId()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int Sequence { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<CommandSeq> CreateCommandSeq(FlatBufferBuilder builder,
      Offset<ClientId> clientIdOffset = default(Offset<ClientId>),
      int sequence = 0) {
    builder.StartObject(2);
    CommandSeq.AddSequence(builder, sequence);
    CommandSeq.AddClientId(builder, clientIdOffset);
    return CommandSeq.EndCommandSeq(builder);
  }

  public static void StartCommandSeq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddClientId(FlatBufferBuilder builder, Offset<ClientId> clientIdOffset) { builder.AddOffset(0, clientIdOffset.Value, 0); }
  public static void AddSequence(FlatBufferBuilder builder, int sequence) { builder.AddInt(1, sequence, 0); }
  public static Offset<CommandSeq> EndCommandSeq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // clientId
    return new Offset<CommandSeq>(o);
  }
};


}
