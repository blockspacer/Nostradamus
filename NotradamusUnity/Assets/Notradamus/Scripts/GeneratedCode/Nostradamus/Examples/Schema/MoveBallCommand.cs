// automatically generated by the FlatBuffers compiler, do not modify

namespace Nostradamus.Examples.Schema
{

using System;
using FlatBuffers;

public struct MoveBallCommand : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MoveBallCommand GetRootAsMoveBallCommand(ByteBuffer _bb) { return GetRootAsMoveBallCommand(_bb, new MoveBallCommand()); }
  public static MoveBallCommand GetRootAsMoveBallCommand(ByteBuffer _bb, MoveBallCommand obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MoveBallCommand __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float InputX { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float InputY { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float InputZ { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<MoveBallCommand> CreateMoveBallCommand(FlatBufferBuilder builder,
      float inputX = 0.0f,
      float inputY = 0.0f,
      float inputZ = 0.0f) {
    builder.StartObject(3);
    MoveBallCommand.AddInputZ(builder, inputZ);
    MoveBallCommand.AddInputY(builder, inputY);
    MoveBallCommand.AddInputX(builder, inputX);
    return MoveBallCommand.EndMoveBallCommand(builder);
  }

  public static void StartMoveBallCommand(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddInputX(FlatBufferBuilder builder, float inputX) { builder.AddFloat(0, inputX, 0.0f); }
  public static void AddInputY(FlatBufferBuilder builder, float inputY) { builder.AddFloat(1, inputY, 0.0f); }
  public static void AddInputZ(FlatBufferBuilder builder, float inputZ) { builder.AddFloat(2, inputZ, 0.0f); }
  public static Offset<MoveBallCommand> EndMoveBallCommand(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MoveBallCommand>(o);
  }
};


}
